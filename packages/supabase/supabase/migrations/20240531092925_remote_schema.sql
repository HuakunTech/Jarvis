
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."get_aggregated_downloads"() RETURNS TABLE("identifier" "text", "total_downloads" integer)
    LANGUAGE "sql"
    AS $$
  select ext_publish.identifier, sum(ext_publish.downloads)
    from ext_publish
    group by identifier;
$$;

ALTER FUNCTION "public"."get_aggregated_downloads"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_aggregated_downloads_with_details"() RETURNS TABLE("identifier" "text", "total_downloads" integer, "name" "text", "short_description" "text")
    LANGUAGE "sql"
    AS $$
  select pub.identifier, sum(pub.downloads), ext.name, ext.short_description
    from ext_publish pub join extensions ext on pub.identifier = ext.identifier
    group by pub.identifier, ext.name, ext.short_description;
$$;

ALTER FUNCTION "public"."get_aggregated_downloads_with_details"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."increment_downloads"("t_identifier" "text", "t_version" "text") RETURNS integer
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  downloads_after integer;
BEGIN
  -- Increment downloads in ext_publish table
  UPDATE ext_publish
  SET downloads = downloads + 1
  WHERE identifier = t_identifier AND version = t_version;

  -- Increment downloads in extensions table
  UPDATE extensions
  SET downloads = downloads + 1
  WHERE identifier = t_identifier;

  -- Retrieve the updated downloads count from the extensions table
  SELECT downloads 
  INTO downloads_after 
  FROM extensions 
  WHERE identifier = t_identifier;

  RETURN downloads_after;
END;
$$;

ALTER FUNCTION "public"."increment_downloads"("t_identifier" "text", "t_version" "text") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."ext_images" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "sha512" "text" NOT NULL,
    "image_path" "text" NOT NULL
);

ALTER TABLE "public"."ext_images" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ext_publish" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "version" "text" NOT NULL,
    "manifest" "jsonb" NOT NULL,
    "shasum" "text" NOT NULL,
    "size" integer NOT NULL,
    "tarball_path" "text" NOT NULL,
    "cmd_count" smallint NOT NULL,
    "identifier" "text" NOT NULL,
    "downloads" integer NOT NULL,
    "demo_images" "text"[] NOT NULL
);

ALTER TABLE "public"."ext_publish" OWNER TO "postgres";

COMMENT ON COLUMN "public"."ext_publish"."manifest" IS 'Metadata in package.json';

COMMENT ON COLUMN "public"."ext_publish"."shasum" IS 'Extension Tarball Shasum';

COMMENT ON COLUMN "public"."ext_publish"."size" IS 'tarball size in bytes';

COMMENT ON COLUMN "public"."ext_publish"."tarball_path" IS 'tarball path in file storage (s3 or r2 or supabase storage), not URL.';

COMMENT ON COLUMN "public"."ext_publish"."cmd_count" IS 'Number of Command in Extension';

CREATE TABLE IF NOT EXISTS "public"."extensions" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "identifier" "text" NOT NULL,
    "downloads" integer NOT NULL,
    "short_description" "text" NOT NULL,
    "name" "text" NOT NULL,
    "readme" "text",
    "icon" "jsonb",
    "long_description" "text"
);

ALTER TABLE "public"."extensions" OWNER TO "postgres";

COMMENT ON COLUMN "public"."extensions"."short_description" IS 'Description of Latest Publish';

COMMENT ON COLUMN "public"."extensions"."name" IS 'Extension name of latest publish';

ALTER TABLE "public"."ext_publish" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."extensions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."ext_images"
    ADD CONSTRAINT "ext_images_pkey" PRIMARY KEY ("image_path");

ALTER TABLE ONLY "public"."ext_publish"
    ADD CONSTRAINT "extensions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."extensions"
    ADD CONSTRAINT "extensions_pkey1" PRIMARY KEY ("identifier");

ALTER TABLE ONLY "public"."ext_publish"
    ADD CONSTRAINT "ext_publish_identifier_fkey" FOREIGN KEY ("identifier") REFERENCES "public"."extensions"("identifier") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable read access for all users" ON "public"."ext_publish" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Public Access" ON "public"."extensions" FOR SELECT USING (true);

ALTER TABLE "public"."ext_images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ext_publish" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."extensions" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."get_aggregated_downloads"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_aggregated_downloads"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_aggregated_downloads"() TO "service_role";

GRANT ALL ON FUNCTION "public"."get_aggregated_downloads_with_details"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_aggregated_downloads_with_details"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_aggregated_downloads_with_details"() TO "service_role";

GRANT ALL ON FUNCTION "public"."increment_downloads"("t_identifier" "text", "t_version" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."increment_downloads"("t_identifier" "text", "t_version" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_downloads"("t_identifier" "text", "t_version" "text") TO "service_role";

GRANT ALL ON TABLE "public"."ext_images" TO "anon";
GRANT ALL ON TABLE "public"."ext_images" TO "authenticated";
GRANT ALL ON TABLE "public"."ext_images" TO "service_role";

GRANT ALL ON TABLE "public"."ext_publish" TO "anon";
GRANT ALL ON TABLE "public"."ext_publish" TO "authenticated";
GRANT ALL ON TABLE "public"."ext_publish" TO "service_role";

GRANT ALL ON TABLE "public"."extensions" TO "anon";
GRANT ALL ON TABLE "public"."extensions" TO "authenticated";
GRANT ALL ON TABLE "public"."extensions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."extensions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."extensions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."extensions_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
